{"version":3,"sources":["ui/Tile.js","ui/Board.js","ui/Interface.js","services/api.js","Sudoku.js","App.js","index.js"],"names":["Tile","_ref","puzzle","grid","handleChange","map","row","rowIndex","col","colIndex","_jsx","className","value","type","onChange","e","Board","children","Interface","handleInterface","status","_jsxs","readOnly","onClick","REST","getBoard","fetch","solveBoard","data","board","method","headers","body","JSON","stringify","validateBoard","getGrid","i","Array","fill","copy2DArray","from","to","length","_toConsumableArray","Sudoku","_useState","useState","_useState2","_slicedToArray","setGrid","_useState3","_useState4","puzzleStatus","setPuzzleStatus","initialGrid","useRef","_handleInterface","_asyncToGenerator","_regeneratorRuntime","mark","_callee","action","newGrid","wrap","_context","prev","next","t0","handleCreate","sent","current","abrupt","handleSolve","handleValidate","Error","stop","apply","arguments","_handleCreate","_callee2","response","_context2","json","game","console","log","_handleValidate","_callee3","_context3","_handleSolve","_callee4","_context4","solution","target","test","Number","_x","App","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.115ef3c7.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Tile({ puzzle, grid, handleChange }) {\n  return grid.map((row, rowIndex) => {\n    return row.map((col, colIndex) => {\n      return (\n        <input\n          className={\n            puzzle[rowIndex][colIndex] !== 0\n              ? \"initial\"\n              : col !== 0\n              ? \"tile taken\"\n              : \"tile\"\n          }\n          value={col === 0 ? \"\" : col}\n          key={rowIndex + \" \" + colIndex}\n          type=\"text\"\n          onChange={(e) => handleChange(rowIndex, colIndex, e)}\n        />\n      );\n    });\n  });\n}\n\nexport default Tile;\n","import React from \"react\";\nimport Tile from \"./Tile\";\n\nfunction Board({ puzzle, grid, handleChange }) {\n  return (\n    <div className=\"board\">\n      <Tile puzzle={puzzle} grid={grid} handleChange={handleChange} />\n    </div>\n  );\n}\n\nexport default Board;\n","import React from \"react\";\n\nfunction Interface({ handleInterface, status }) {\n  return (\n    <div className=\"interface\">\n      <div className=\"info-interface\">\n        <input readOnly value={status}></input>\n      </div>\n      <div className=\"action-interface\">\n        <button\n          className=\"generator-btn btn\"\n          onClick={() => {\n            handleInterface(\"create\");\n          }}\n        >\n          Create\n        </button>\n        <button\n          className=\"validate-btn btn\"\n          onClick={() => {\n            handleInterface(\"validate\");\n          }}\n        >\n          Validate\n        </button>\n        <button\n          className=\"solve-btn btn\"\n          onClick={() => {\n            handleInterface(\"solve\");\n          }}\n        >\n          Solve\n        </button>\n        <button\n          className=\"clear-btn btn\"\n          onClick={() => {\n            handleInterface(\"clear\");\n          }}\n        >\n          Clear\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default Interface;\n","export const REST = {\n  getBoard: function () {\n    return fetch(`http://localhost:5001/puzzle`);\n  },\n  solveBoard: function (grid) {\n    const data = {\n      board: grid,\n    };\n    return fetch(`http://localhost:5001/solve`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(data),\n    });\n  },\n  validateBoard: function (grid) {\n    const data = {\n      board: grid,\n    };\n    return fetch(`http://localhost:5001/validate`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(data),\n    });\n  },\n};\n","import \"./App.css\";\nimport React, { useState, useRef } from \"react\";\nimport Board from \"./ui/Board\";\nimport Interface from \"./ui/Interface\";\nimport { REST } from \"./services/api.js\";\n\nfunction getGrid() {\n  const grid = [];\n  for (let i = 0; i < 9; i++) {\n    grid[i] = Array(9).fill(0);\n  }\n  return grid;\n}\n\nfunction copy2DArray(from, to) {\n  for (let i = 0; i < from.length; i++) {\n    to[i] = [...from[i]];\n  }\n}\n\nfunction Sudoku() {\n  const [grid, setGrid] = useState(getGrid);\n  const [puzzleStatus, setPuzzleStatus] = useState(\"** UNSOLVED **\");\n  const initialGrid = useRef(getGrid());\n\n  function handleChange(row, col, e) {\n    const re = /^[0-9\\b]+$/;\n    if (e.target.value === \"\" || re.test(e.target.value)) {\n      if (Number(e.target.value) < 10 && initialGrid.current[row][col] === 0) {\n        const newGrid = [...grid];\n        newGrid[row][col] = Number(e.target.value);\n        setGrid(newGrid);\n      }\n    }\n  }\n\n  async function handleInterface(action) {\n    let newGrid;\n    switch (action) {\n      case \"create\":\n        newGrid = await handleCreate();\n        copy2DArray(newGrid, initialGrid.current);\n        setPuzzleStatus(\"\");\n        setGrid(newGrid);\n        break;\n      case \"solve\":\n        newGrid = await handleSolve();\n        setGrid(newGrid);\n        break;\n      case \"clear\":\n        newGrid = getGrid();\n        copy2DArray(newGrid, initialGrid.current);\n        setGrid(newGrid);\n        setPuzzleStatus(\"\");\n        break;\n      case \"validate\":\n        const status = await handleValidate();\n        const puzzStats = status ? \"** SOLVED **\" : \"** UNSOLVED **\";\n        setPuzzleStatus(puzzStats);\n        break;\n      default:\n        throw new Error(\"Invalid action\");\n    }\n  }\n\n  async function handleCreate() {\n    try {\n      const response = await REST.getBoard();\n      const data = await response.json();\n      return data.game;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  async function handleValidate() {\n    try {\n      const response = await REST.validateBoard(grid);\n      const data = await response.json();\n      return data.status;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  async function handleSolve() {\n    try {\n      const response = await REST.solveBoard(grid);\n      const data = await response.json();\n      if (data.status) {\n        setPuzzleStatus(\"** SOLVED **\");\n        return data.solution;\n      } else {\n        setPuzzleStatus(\"** UNSOLVABLE **\");\n        return grid;\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  return (\n    <div className=\"Sudoku\">\n      <Board\n        puzzle={initialGrid.current}\n        grid={grid}\n        handleChange={handleChange}\n      />\n      <Interface handleInterface={handleInterface} status={puzzleStatus} />\n    </div>\n  );\n}\n\nexport default Sudoku;\n","import \"./App.css\";\nimport React from \"react\";\nimport Sudoku from \"./Sudoku\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Sudoku />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}